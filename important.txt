9) Relationship between Node and Express.
================================================================================

Q) How to start the project?
    Use the command `npm init`. 
    To install express type `npm install --save express`

Q) What is node?
    Its a javascript runtime used to execute code outside of the browser.

Q) What is express?
    Library that runs in the Node runtime. Has helpers to make dealing with HTTP
    traffice easier.

Q) Explain the relation between node and express?
    Node listens on some port to receive all incoming HTTP requests on that port.
    Whenever a request is received by node, it hands off that request to Express.
    
    Express will look at the request, and decides which route handler to use.
    The response from route handler is handed over to Node, and node hands off
    the response to a client who had originally requested.
    
    For diagram, see the Book Notes.
    
================================================================================
10) Generating Express Apps
================================================================================

Q) What is index.js file?
    Traditionally, starting point of a node project is index.js file.
    You can use any file name for starting point of node project. But tradition-
    ally it is index.js file.

Q) Module system in express?
    Node at this point supports COMMONJS type of module system.
    Module system is used to import or make use of already existing code.
    Your code is divided up into multiple files, and you can import those files
    as you see fit.
    
    For server side we make use of COMMONJS type of module system.
    For React we make use of ES2015 type of module system.
    
Q) How to use route handlers in Express?
    By using app.get('/') syntax, we can create route handlers.
    For C9, try running it on port 8080 instead of 5000.
    
================================================================================
11) Express Route Handlers
================================================================================
Q) app.listen() 
    Even though it looks like express is calling .listen(), behind the scenes
    node listens on the specified port, and any incoming requests will be given
    to the express.

================================================================================
12) Heroku Deployment
================================================================================
Q) What is port binding?
    Heroku after hosting our code, will decide which port should be open for 
    incoming requests. So it is untill runtime we cant decide on which port to
    use. 
    
    So to make this happen, we make use of process.env.PORT. 
    
    Dynamic port binding: Heroku tells us which port our app will use, so we 
    need to make sure we listen to the port they tell us.
    
Q) Explain the use of "engines" inside package.json file ?
    For heroku, we need to specify what version of node to use. Inorder to tell
    heroku we add "engines" property inside package.json file.

Q) How to tell heroku to start our application i.e, about start script?
    Inside the package.json file, heroku looks for "start" inside "scripts"
    The "start" should have the command to run our node code like "node index.js"

    Heroku looks up in package.json file, for which runtime to use, which 
    dependencies to install and how to start the application. 
    
================================================================================
14) Verifying Heroku deployment
================================================================================
heroku login
heroku create - to create a heroku app. ( this will give git url )
git remote add heroku <git url>
git push heroku master - to push the code to heroku branch
heroku logs  - to see the list of logs.

================================================================================
17) The oAuth flow
================================================================================
OAuth flow diagram see the notes.

Learnt some important stuff for google oAuth flow.

================================================================================
18) Overview of passportjs
================================================================================
PassportJS helps us in automating oAuth process, but two main pain points are

passportjs requires the developer to add some logic at some specified location.
( which may be weird for most users ).

Also, to work with passport, we need to install atleast 2 packages. 
passport and passport-strategy.

For explanation of these, see the Notes. 

================================================================================
19) Setup passport
================================================================================
We require two libraries, passpot and google oauth strategy.

The statement passport.use(new GoogleOAuthStrategy())
tells the passport, how to make use of specific oauth strategy.

In short, passport knows how to authenticate users, but it doesn't know how
to authenticate users using google oauth service. So we write the above 
statement to make use of google oauth service for authenticating users.

================================================================================
21) Securing APIs
================================================================================
We have to take steps not to store API keys on git.
One such strategy is, create a file called 'keys.js' in a folder 'config'.

Put all the API keys there and add, 'keys.js' file to .gitignore.

================================================================================
22) Google Strategy Options
================================================================================
The third option in new GoogleOAuthStrategy({}, () => {}) object is the, callbackURL
route that users are sent to after they grant permissions.

For example:
    new GoogleOAuthStrategy({
        clientID: <client_id>,
        clientSecret: <client_secret>,
        callbackURL: <callback_url>
    }, (accessToken) => {})
    
================================================================================
23) Testing oAuth
================================================================================
Whenever user comes to /auth/google route, we want to kick them to passport flow.
We do it as a second argument to /auth/google, like
passport.authenticate('google', {
    scope: [] // specifies what properties we want to have access to inside 
              // the profile.
});

Meaning of passport.authenticate('google')
    It means that hey passport, whenever you are authenticating with passport,
    if you see a string 'google', then use new GoogleOAuthStrategy object.
    

================================================================================
24) Importance of redirect_uri
================================================================================
With the above configuration if we try to test oAuth flow, then we are getting
redirect_uri mismatch.

For security reasons, the redirctURL that we gave as part of passport configuration
must match with the redirectURl when initialzing oAuth keys on google plus.

Since when setting up keys, we gave /* for redirctURL, google is throwing an
error. 

So to correct it go to console.developers.google.com and change the callbackURL.


================================================================================
25) OAuth callbacks
================================================================================

After updating the callbackURL in google oauth application, we are now redirected
to /auth/google/callback url, 

We created a route to listen for that URL, and when ever it receives request, 
we tell passport to get the user with passport.authenticate('google')

but till now we did not tell passport to do something with the user, thats why it
hangs. 

When this entire passport flow is done, the console.log(accessToken) is executed,
when the passport correctly gets the user based on the token.

so, that means, we got the code from google and from the local server we 
exchanged the code for the user profile. 

================================================================================
26) Access token and refreshToken
================================================================================
AccessToken is useful when we are doing something on behalf of user, like 
sending and reading emails.

AccessToken is for short period only, so it will expire after some time.

For this case, we make use of refreshToken.

We are also passed the user profile as well.

At this means that the OAuth flow is done and we are given user profile.


================================================================================
27) NodeMon and package.json file script
================================================================================
We can add our own custom scripts inside package.json file. Under "script" 
property we write, "dev": "nodemon index.js", and from command line we type 
'npm run dev'.


================================================================================
28) Server structure refactor
================================================================================
Express does not enforce any code structure for organizing code, but the common
pattern is to use, config, routes, and services folder. See the notes for 
diagram.

If you want a module to just run, ( which does not export any object or function )
you can just write require('./services/passport');

In our example, when defining authRoute.js file, we wrote, 
module.exports = (app) => {
}, 
so when we do require('authRoute'), we get function, and we are calling the 
returned function with app object, like this require("./routes/authRoutes")(app);

================================================================================
29) Theory of authentication
================================================================================
HTTP is a stateless protocol, i.e, state wont be persisted between requests.
For authentication, we make use of concept of cookie,
For flow chart of how cookie is used, see Notes.

For a flow chart of how the process works with mongodb see the diagram of notes.


================================================================================
32) MongoDB setup
================================================================================
We make use of database as a service provider mLab. And we make use of mongoose.js
to interact with the mongodb.

DB name is 'emaily-dev-nmsbane', and for username and password to connect to 
db is in the notes.

For a diagram of it see the notes. 

================================================================================
33) Connecting mongoose to mongodb
================================================================================
We connect to remote mlab database using mongoose.connect() statement.
We securely store the mongodbURI inside the keys.js file inside the config 
directory.

================================================================================
34) Why do we need mongodb?
================================================================================
Whenever user signups, passport will reply back with the user's profile inforamtion.
We make use of 'id' inside the returned google response, to store the user in the 
mongodb.

When the same user logins with the same id, then we can conclude that, the visitor
has been before, and put the user id in the 'set-cookie' header .

To make use of cookies we need mongodb to store the user who already signed up.

For more information see the notes. ( with the flowchart ).

================================================================================
35) Mongoose Model class
================================================================================
Even though in mongodb, you can mix and match properties as you see fit, but 
with mongooose we define a schema before hand.

For defining schema we use mongoose.Schema. Also, in ES6 const {Schema} = mongoose
is shorthand for getting const Schema = mongoose.Schema.

Creating a file is one step and "requiring" it is another important step.
Eventhough you create a file, but you dont require it, has no meaning at the end.

================================================================================
36) Saving model instances
================================================================================
One important thing to remember is 
===> The order in which we write "import" statements is important.
i.e, 
    if we write require('./services/passport'); require('./models/User');
    then it will throw schema error, because, passport.js makes use of User model
    which is not yet defined. It will be defined after executing require('./services/passport');
    
Also, for model files ( i.e defined inside models directory ) we dont write 
export statements. Because, mongoose gets confused if a file is required more 
than once. 

Inorder to avoid it, we make use of mongoose.model('users'), to get the required
model.

================================================================================
37) Mongoose queries
================================================================================
We make use of User.findOne( <filter_object> ). 
Which will find a single user which matches the <filter_object>.

One important thing is that, all mongoose queries return promise as output,
so we should listen for User.findOn(<filter_object>).then().

================================================================================
38) Passport Callbacks
================================================================================
After getting the profile, accessToken, we can call done() ( passed by passport )

done() expects two parameters, 
1st parameter is "error" object, 
2nd parameter is the user record. 

in done(null, existingUser) we mean that there are no errors, we are happy 
and second parameter is existingUser.

================================================================================
39) Encoding users
================================================================================
Passport, after getting the user profile, will call serializeUser() on User 
model, to generate a unique token. 

Passport will take care of setting this unique token inside set-cookie header.

On subsequent requests from the same browser, that same token is given to passport,
which will deserialize the user from the token.

For a flowchart see the notes.

Also, for serializeUser(), we add it as property of passport, passing a callback
which will run when the user is about to get serialized, like this,
passport.serializeUser(user, done), where user is passed from done(err, existingUser).

IMPORTANT ==> user.id is shorthand for "_id": { "_oid": ''}, created by mongo 

================================================================================
40) Deserialize users
================================================================================
After getting the user.id from cookie, passport needs the exact user object.
Which is done by calling passport.deserialize

================================================================================
41) Enabling cookies
================================================================================
After writing serializeUser and deserializeUser in passport, we need to tell 
passport to use cookies as authentication. 

Passport is very generic, you can use it for JWT as well, so we need to tell 
passport to use cookies to authenticate. 

Out of Box, express, does not aware of cookies, so we need to install 
cookie-session, to make express cookie aware. 

cookieSession function, requires an object, with the following parameters,
maxAge and keys.

Remember 'keys' is an array.

To tell passport to make use of cookie, write these statements,
app.use(passport.initialize()) // in index.js file.
app.use(passport.session()) // in index.js file.

================================================================================
43) Logging out users
================================================================================
req.logout() is automatically attached by passport, whenever user logsin.
req.user contains the user object. 

It performs logout(), by taking the cookie and removing id from it. 

Instant we call logout(), req.user is destroyed. 