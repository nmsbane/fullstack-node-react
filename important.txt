9) Relationship between Node and Express.
================================================================================

Q) How to start the project?
    Use the command `npm init`. 
    To install express type `npm install --save express`

Q) What is node?
    Its a javascript runtime used to execute code outside of the browser.

Q) What is express?
    Library that runs in the Node runtime. Has helpers to make dealing with HTTP
    traffice easier.

Q) Explain the relation between node and express?
    Node listens on some port to receive all incoming HTTP requests on that port.
    Whenever a request is received by node, it hands off that request to Express.
    
    Express will look at the request, and decides which route handler to use.
    The response from route handler is handed over to Node, and node hands off
    the response to a client who had originally requested.
    
    For diagram, see the Book Notes.
    
================================================================================
10) Generating Express Apps
================================================================================

Q) What is index.js file?
    Traditionally, starting point of a node project is index.js file.
    You can use any file name for starting point of node project. But tradition-
    ally it is index.js file.

Q) Module system in express?
    Node at this point supports COMMONJS type of module system.
    Module system is used to import or make use of already existing code.
    Your code is divided up into multiple files, and you can import those files
    as you see fit.
    
    For server side we make use of COMMONJS type of module system.
    For React we make use of ES2015 type of module system.
    
Q) How to use route handlers in Express?
    By using app.get('/') syntax, we can create route handlers.
    For C9, try running it on port 8080 instead of 5000.
    
================================================================================
11) Express Route Handlers
================================================================================
Q) app.listen() 
    Even though it looks like express is calling .listen(), behind the scenes
    node listens on the specified port, and any incoming requests will be given
    to the express.

================================================================================
12) Heroku Deployment
================================================================================
Q) What is port binding?
    Heroku after hosting our code, will decide which port should be open for 
    incoming requests. So it is untill runtime we cant decide on which port to
    use. 
    
    So to make this happen, we make use of process.env.PORT. 
    
    Dynamic port binding: Heroku tells us which port our app will use, so we 
    need to make sure we listen to the port they tell us.
    
Q) Explain the use of "engines" inside package.json file ?
    For heroku, we need to specify what version of node to use. Inorder to tell
    heroku we add "engines" property inside package.json file.

Q) How to tell heroku to start our application i.e, about start script?
    Inside the package.json file, heroku looks for "start" inside "scripts"
    The "start" should have the command to run our node code like "node index.js"

    Heroku looks up in package.json file, for which runtime to use, which 
    dependencies to install and how to start the application. 
    
================================================================================
14) Verifying Heroku deployment
================================================================================
heroku login
heroku create - to create a heroku app. ( this will give git url )
git remote add heroku <git url>
git push heroku master - to push the code to heroku branch
heroku logs  - to see the list of logs.

================================================================================
17) The oAuth flow
================================================================================
OAuth flow diagram see the notes.

Learnt some important stuff for google oAuth flow.

================================================================================
18) Overview of passportjs
================================================================================
PassportJS helps us in automating oAuth process, but two main pain points are

passportjs requires the developer to add some logic at some specified location.
( which may be weird for most users ).

Also, to work with passport, we need to install atleast 2 packages. 
passport and passport-strategy.

For explanation of these, see the Notes. 

================================================================================
19) Setup passport
================================================================================
We require two libraries, passpot and google oauth strategy.

The statement passport.use(new GoogleOAuthStrategy())
tells the passport, how to make use of specific oauth strategy.

In short, passport knows how to authenticate users, but it doesn't know how
to authenticate users using google oauth service. So we write the above 
statement to make use of google oauth service for authenticating users.

================================================================================
21) Securing APIs
================================================================================
We have to take steps not to store API keys on git.
One such strategy is, create a file called 'keys.js' in a folder 'config'.

Put all the API keys there and add, 'keys.js' file to .gitignore.
